class TestCode(tk.Frame):
    def __init__(self, master, controller, username, password, servers, **kwargs):
        super().__init__(master, **kwargs)
        self.controller = controller
        self.username = username
        self.password = password
        self.servers = servers  # List of tuples: (Environment, Hostname)
        self.selected_server = self.servers[0]
        self.base_url = 'https://qdlp2bcmapp0002.ess.fiserv.one/mvcm-api/logs'
        self.cache = {}  # Cache for API responses

        # Create an input frame for date and time filters.
        self.input_frame = ttk.Frame(self)
        self.input_frame.pack(pady=10)
        
        # Date entry label and field.
        ttk.Label(self.input_frame, text="Date (YYYY-MM-DD):").grid(row=0, column=0, padx=5, pady=2)
        self.date_entry = ttk.Entry(self.input_frame)
        self.date_entry.grid(row=0, column=1, padx=5, pady=2)
        
        # Time entry label and field.
        ttk.Label(self.input_frame, text="Time (HH: or HH:MM):").grid(row=1, column=0, padx=5, pady=2)
        self.time_entry = ttk.Entry(self.input_frame)
        self.time_entry.grid(row=1, column=1, padx=5, pady=2)
        
        # Button to start log retrieval.
        self.retrieve_button = ttk.Button(self.input_frame, text="Retrieve Logs", command=self.start_log_retrieval)
        self.retrieve_button.grid(row=2, column=0, columnspan=2, pady=5)

        # Create a panel for displaying logs.
        self.log_panel = ttk.Frame(self)
        self.log_panel.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Create the Text widget for log output.
        self.text_widget = tk.Text(self.log_panel, wrap='none', font=("Verdana", 10))
        self.text_widget.pack(side='left', fill='both', expand=True)
        
        # Create a vertical scrollbar and attach it.
        self.v_scrollbar = ttk.Scrollbar(self.log_panel, orient='vertical', command=self.text_widget.yview)
        self.v_scrollbar.pack(side='right', fill='y')
        self.text_widget.configure(yscrollcommand=self.v_scrollbar.set)
    
    def start_log_retrieval(self):
        """Starts a background thread to retrieve logs based on the entered date and time filters."""
        date_filter = self.date_entry.get().strip()
        time_filter = self.time_entry.get().strip()
        
        # If fields are empty, use None so that no filtering is applied.
        if date_filter == "":
            date_filter = None
        if time_filter == "":
            time_filter = None

        # Clear the text widget before starting the search
        self.text_widget.delete("1.0", tk.END)
        self.text_widget.insert(tk.END, "Starting log retrieval...\n")
        
        # Start a background thread so the UI remains responsive.
        retrieval_thread = threading.Thread(target=self.testCode, args=(date_filter, time_filter))
        retrieval_thread.daemon = True
        retrieval_thread.start()
    
    def log_timing(self, message):
        """Log timing information to the text widget on the main thread."""
        self.text_widget.after(0, lambda: self.text_widget.insert(tk.END, f"{message}\n"))
        
    def download_and_filter_log(self, package_index, parent, name, time_filter, date_filter):
        """
        Downloads a single log file and applies time filtering if specified.
        Constructs the download URL based on the presence of a parent.
        Returns a tuple of (log_content, download_time)
        """
        start_time = time.time()
        
        # Skip downloading logs if date filter doesn't match
        if date_filter and date_filter != "0000-00-00":
            # Check if this log was modified on or after date_filter before downloading
            # If we have that information, otherwise download
            pass
        
        # Construct the download URL
        if parent and not (name.startswith('server.') and name.endswith('.log') and name[7:-4].isdigit()) and not (name.startswith('catalina.')):
            download_url = f'{self.base_url}/download/{package_index}/{parent}/{name}'
        else:
            download_url = f'{self.base_url}/download/{package_index}/{name}'
        
        # Check cache first
        cache_key = f"{download_url}_{time_filter}_{date_filter}"
        if cache_key in self.cache:
            return self.cache[cache_key], 0, 0
        
        # Download the log file
        download_resp = self.controller.mvcm.getalllogs(download_url)
        download_time = time.time() - start_time
        
        log_content = download_resp.text if hasattr(download_resp, 'text') else download_resp
        
        # Filter the log content
        filter_start_time = time.time()
        if (time_filter or (date_filter and date_filter != "0000-00-00")) and log_content:
            log_content = self.filter_log_content(log_content, time_filter, date_filter)
        filter_time = time.time() - filter_start_time
        
        # Cache the result
        self.cache[cache_key] = log_content
        
        return log_content, download_time, filter_time
    
    def filter_log_content(self, log_content, time_filter, date_filter):
        """
        Filters log content based on time and date filters.
        This is separated for better profiling and optimization.
        """
        # Shortcut: if both filters are None, return the original content
        if not time_filter and (not date_filter or date_filter == "0000-00-00"):
            return log_content
            
        # Parse time filter
        desired_hour = None
        desired_minute = None
        desired_tenth = None
        
        if time_filter:
            time_parts = time_filter.split(":")
            desired_hour = time_parts[0]
            if len(time_parts) > 1:
                desired_minute = time_parts[1]
                if len(desired_minute) == 1:
                    desired_tenth = desired_minute[0]
                if desired_minute == '':
                    desired_minute = None
        
        desired_date = date_filter if date_filter and date_filter != "0000-00-00" else None
        
        # Create a regular expression pattern for faster filtering
        if desired_date and desired_hour and desired_minute:
            # Full date and time (YYYY-MM-DD HH:MM)
            pattern = f"^{desired_date} {desired_hour}:{desired_minute}"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and line.startswith(pattern)]
        elif desired_date and desired_hour and desired_tenth:
            # Date, hour and tenth of minute (YYYY-MM-DD HH:M)
            pattern = f"^{desired_date} {desired_hour}:{desired_tenth}"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and line.startswith(pattern)]
        elif desired_date and desired_hour:
            # Date and hour only (YYYY-MM-DD HH)
            pattern = f"^{desired_date} {desired_hour}:"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and line.startswith(pattern)]
        elif desired_date:
            # Date only (YYYY-MM-DD)
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 10 and line.startswith(desired_date)]
        elif desired_hour and desired_minute:
            # Hour and minute only (HH:MM)
            pattern = f" {desired_hour}:{desired_minute}"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and pattern in line[:16]]
        elif desired_hour and desired_tenth:
            # Hour and tenth of minute (HH:M)
            pattern = f" {desired_hour}:{desired_tenth}"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and pattern in line[:15]]
        elif desired_hour:
            # Hour only (HH)
            pattern = f" {desired_hour}:"
            filtered_lines = [line for line in log_content.splitlines() if len(line) >= 19 and pattern in line[:14]]
        else:
            # No valid filters, return the original content
            return log_content
        
        return "\n".join(filtered_lines)

    def testCode(self, specified_date=None, specified_time=None):
        """
        Retrieve log files from the API with optional date and time filtering.
        """
        overall_start_time = time.time()
        
        # Set default date filter if none provided
        date_filter = specified_date if specified_date else "0000-00-00"
        time_filter = specified_time if specified_time else ""
        
        self.log_timing(f"Starting log retrieval with date filter: {date_filter}, time filter: {time_filter}")
        
        # Fetch packages list
        packages_start_time = time.time()
        resp = self.controller.mvcm.getalllogs(self.base_url)
        packages_end_time = time.time()
        packages_time = packages_end_time - packages_start_time
        self.log_timing(f"API call for packages list took: {packages_time:.3f} seconds")
        
        try:
            packages = resp.json()
        except Exception:
            packages = json.loads(resp.text)
        
        # Collect all logs to be downloaded
        logs_to_download = []
        log_list_fetch_time = 0
        
        for i, package in enumerate(packages, 1):
            log_type = package.get('name', 'Unknown')
            
            list_start_time = time.time()
            resp = self.controller.mvcm.getalllogs(f'{self.base_url}/{i}')
            list_end_time = time.time()
            log_list_fetch_time += list_end_time - list_start_time
            
            log_files_array = resp.json().get('logFiles', [])
            for log_file in log_files_array:
                name = log_file.get('name', 'Unnamed Log')
                parent = log_file.get('parent')
                date_modified = log_file.get('dateModified')
                
                # Only process logs modified on or after the specified date
                if not date_filter or date_filter == "0000-00-00" or (date_modified and date_modified >= date_filter):
                    logs_to_download.append((i, parent, name, log_type))
        
        self.log_timing(f"API calls for log lists took: {log_list_fetch_time:.3f} seconds")
        self.log_timing(f"Found {len(logs_to_download)} logs to download")
        
        # Use ThreadPoolExecutor to parallelize the API calls for downloading logs
        log_files = {}
        total_download_time = 0
        total_filter_time = 0
        
        with ThreadPoolExecutor(max_workers=20) as executor:
            future_to_log = {}
            for (package_index, parent, name, log_type) in logs_to_download:
                future = executor.submit(
                    self.download_and_filter_log, 
                    package_index, parent, name, time_filter, date_filter
                )
                future_to_log[future] = (name, log_type)
            
            # Collect results as they complete
            for future in concurrent.futures.as_completed(future_to_log):
                name, log_type = future_to_log[future]
                try:
                    log_content, download_time, filter_time = future.result()
                    total_download_time += download_time
                    total_filter_time += filter_time
                    if log_content and log_content.strip():  # Only keep non-empty logs
                        log_files[name] = {'type': log_type, 'content': log_content}
                except Exception as exc:
                    self.log_timing(f"Error retrieving log {name}: {exc}")
        
        overall_end_time = time.time()
        overall_time = overall_end_time - overall_start_time
        
        # Summary timing information
        self.log_timing(f"Total download time: {total_download_time:.3f} seconds")
        self.log_timing(f"Total filtering time: {total_filter_time:.3f} seconds")
        self.log_timing(f"Overall processing time: {overall_time:.3f} seconds")
        self.log_timing(f"Retrieved {len(log_files)} logs with content")

        print(f"Total download time: {total_download_time:.3f} seconds")
        print(f"Total filtering time: {total_filter_time:.3f} seconds")
        print(f"Overall processing time: {overall_time:.3f} seconds")
        print(f"Retrieved {len(log_files)} logs with content")
        
        # Schedule the UI update on the main thread
        self.text_widget.after(0, self.update_text_widget, log_files)
    
    def update_text_widget(self, log_files):
        """Update the Text widget with the retrieved logs."""
        self.text_widget.delete("1.0", tk.END)
        self.text_widget.insert(tk.END, "Collected Log Files:\n")
        self.text_widget.insert(tk.END, "=" * 80 + "\n")
        
        #if not log_files:
        #    self.text_widget.insert(tk.END, "No logs found matching the criteria.\n")
        #    return
            
        for log_name, details in log_files.items():
            if not details['content']:
                continue
                
            self.text_widget.insert(tk.END, f"Log Name: {log_name}\n")
            self.text_widget.insert(tk.END, f"Log Type: {details['type']}\n")
            self.text_widget.insert(tk.END, "-" * 80 + "\n")
            self.text_widget.insert(tk.END, details['content'] + "\n")
            self.text_widget.insert(tk.END, "=" * 80 + "\n")
