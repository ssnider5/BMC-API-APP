import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import mvcm
from business import BusinessController
import threading

# (Assume DownloadRestorePanel, UploadPanel, CreatePanel, UpdatePanel, and other panels remain unchanged)

class ActionPanel(tk.Frame):
    def __init__(self, master, controller, username, password, saved_configs, servers, **kwargs):
        super().__init__(master, **kwargs)
        self.controller = controller
        self.username = username
        self.password = password
        self.saved_configs = saved_configs
        self.servers = servers  # List of tuples: (Environment, Hostname)
        self.selected_config_name = None
        self.selected_file = None
        self.create_data = None
        self.source_hostname = None
        self.target_hostname = None
        self.current_banner = "Saved Configurations"  # default banner selection
        self.current_action = None
        self.create_widgets()
    
    def create_widgets(self):
        # ---------------------------
        # Banner: Program name and two new banner buttons
        # ---------------------------
        self.banner_frame = ttk.Frame(self)
        self.banner_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Program name label on left
        self.program_label = tk.Label(self.banner_frame, text="bmc api", font=('TkDefaultFont', 14, 'bold'))
        self.program_label.pack(side=tk.LEFT, padx=(5, 10))
        
        # Banner buttons: "Saved Configurations" and "CCS Servers"
        self.banner_buttons = {}
        for option in ["Saved Configurations", "CCS Servers"]:
            btn = tk.Button(self.banner_frame, text=option,
                            command=lambda opt=option: self.select_banner(opt))
            btn.pack(side=tk.LEFT, padx=5)
            self.banner_buttons[option] = btn
        
        # Set default banner selection
        self.select_banner("Saved Configurations", initial=True)
        
        # ---------------------------
        # Orange line under the banner
        # ---------------------------
        self.orange_line = tk.Frame(self, bg="orange", height=2)
        self.orange_line.pack(fill=tk.X, padx=0, pady=(0, 10))
        
        # ---------------------------
        # Main container: side panel (collapsible) and content area
        # ---------------------------
        self.main_container = ttk.Frame(self)
        self.main_container.pack(fill=tk.BOTH, expand=True)
        
        # Side panel (left) – dark grey background, full height
        self.side_panel = tk.Frame(self.main_container, bg="#444444", width=200)
        self.side_panel.pack(side=tk.LEFT, fill=tk.Y)
        
        # Toggle button to collapse/expand the side panel; it uses the same bg and white text
        self.toggle_button = tk.Button(self.side_panel, text="Collapse",
                                       command=self.toggle_side_panel,
                                       bg="#444444", fg="white", bd=0)
        self.toggle_button.pack(fill=tk.X)
        
        # Container for option “buttons” inside the side panel
        self.side_panel_options_frame = tk.Frame(self.side_panel, bg="#444444")
        self.side_panel_options_frame.pack(fill=tk.BOTH, expand=True)
        
        # Content panel (right side)
        self.content_panel = ttk.Frame(self.main_container)
        self.content_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Populate the side panel based on the current banner selection
        self.update_side_panel()
        
        # For Saved Configurations, add the header in the content panel
        if self.current_banner == "Saved Configurations":
            self.add_saved_configurations_header()
    
    def select_banner(self, banner, initial=False):
        self.current_banner = banner
        # Update banner button appearance
        for key, btn in self.banner_buttons.items():
            if key == banner:
                btn.config(bg="orange", fg="white")
            else:
                btn.config(bg="SystemButtonFace", fg="black")
        # Clear the content panel and then add header if needed
        for widget in self.content_panel.winfo_children():
            widget.destroy()
        if banner == "Saved Configurations":
            self.add_saved_configurations_header()
        elif banner == "CCS Servers":
            header = ttk.Label(self.content_panel, text="CCS Servers", font=('TkDefaultFont', 12, 'bold'))
            header.pack(pady=(10, 5))
        # Update side panel options accordingly
        self.update_side_panel()
    
    def add_saved_configurations_header(self):
        # Title and server info (unchanged from your original code)
        title_label = ttk.Label(self.content_panel, text="Manage Saved Configurations", font=('TkDefaultFont', 12, 'bold'))
        title_label.pack(pady=(10, 5))
        self.current_server_label = ttk.Label(
            self.content_panel,
            text=f"Current Server: {self.servers[0][0]} ({self.servers[0][1]})",
            font=('TkDefaultFont', 10)
        )
        self.current_server_label.pack(pady=(0, 10))
        
        # Server dropdown button
        server_dropdown_frame = ttk.Frame(self.content_panel)
        server_dropdown_frame.pack(fill=tk.X, padx=5, pady=(0, 10), anchor="w")
        self.servers_mb = tk.Menubutton(server_dropdown_frame, text="Change Server ▼", relief="flat", bd=0)
        self.servers_mb.menu = tk.Menu(self.servers_mb, tearoff=0)
        self.servers_mb["menu"] = self.servers_mb.menu
        for server in self.servers:
            env, hostname = server
            label = f"{env} ({hostname})"
            self.servers_mb.menu.add_command(label=label, command=lambda s=server: self.set_server(s))
        self.servers_mb.pack(side=tk.LEFT)
    
    def set_server(self, server):
        # Update the current server label and reconnect via the controller
        self.current_server_label.config(text=f"Current Server: {server[0]} ({server[1]})")
        self.controller.connect(server[1], self.username, self.password)
        new_configs = self.controller.get_saved_configurations()
        self.saved_configs = new_configs
        # (Optionally trigger a refresh of any open panels)
    
    def update_side_panel(self):
        # Clear existing side panel options
        for widget in self.side_panel_options_frame.winfo_children():
            widget.destroy()
        # Determine the options based on the banner selection
        if self.current_banner == "Saved Configurations":
            options = ["Download", "Upload", "Restore", "Create", "Update"]
        elif self.current_banner == "CCS Servers":
            options = ["CCS Option Placeholder"]
        else:
            options = []
        # Create option buttons with no border and white text on dark grey
        for option in options:
            btn = tk.Button(self.side_panel_options_frame, text=option,
                            bg="#444444", fg="white", bd=0,
                            activebackground="#666666", activeforeground="white",
                            command=lambda opt=option: self.select_side_option(opt))
            btn.pack(fill=tk.X, padx=5, pady=2)
    
    def select_side_option(self, option):
        self.current_action = option
        # Highlight the selected option by changing its background
        for widget in self.side_panel_options_frame.winfo_children():
            if isinstance(widget, tk.Button):
                if widget.cget("text") == option:
                    widget.config(bg="#666666")
                else:
                    widget.config(bg="#444444")
        # For Saved Configurations, keep the header then load the detailed panel
        if self.current_banner == "Saved Configurations":
            # Remove all widgets below the header (clear the content panel)
            for widget in self.content_panel.winfo_children():
                widget.destroy()
            self.add_saved_configurations_header()
            # Now load the corresponding panel for the chosen option
            if option in ['Download', 'Restore']:
                panel = DownloadRestorePanel(self.content_panel, option, self.saved_configs,
                                             self.username, self.controller.mvcm, self.on_config_select)
                panel.pack(fill=tk.BOTH, expand=True)
                panel.refresh_configs()
            elif option == 'Upload':
                panel = UploadPanel(self.content_panel, self.on_file_select)
                panel.pack(fill=tk.BOTH, expand=True)
            elif option == 'Create':
                panel = CreatePanel(self.content_panel, self.on_create)
                panel.pack(fill=tk.BOTH, expand=True)
            elif option == 'Update':
                panel = UpdatePanel(self.content_panel, self.servers, self.on_update_select)
                panel.pack(fill=tk.BOTH, expand=True)
        elif self.current_banner == "CCS Servers":
            # For CCS Servers, simply show a placeholder
            for widget in self.content_panel.winfo_children():
                widget.destroy()
            header = ttk.Label(self.content_panel, text="CCS Servers", font=('TkDefaultFont', 12, 'bold'))
            header.pack(pady=(10, 5))
            placeholder = ttk.Label(self.content_panel, text="Implement CCS functionality here.")
            placeholder.pack(pady=10)
    
    def toggle_side_panel(self):
        # Toggle the visibility of the side panel
        if self.side_panel.winfo_viewable():
            self.side_panel.pack_forget()
        else:
            self.side_panel.pack(side=tk.LEFT, fill=tk.Y)
    
    # Callback methods (you likely already have these implemented)
    def on_config_select(self, config_name):
        self.selected_config_name = config_name

    def on_file_select(self, file_path):
        if file_path and os.path.exists(file_path):
            self.selected_file = file_path

    def on_create(self, name, description):
        if name:
            self.create_data = (name, description)

    def on_update_select(self, source_hostname, target_hostname):
        self.source_hostname = source_hostname
        self.target_hostname = target_hostname

# -------------------------------
# Main Application and other panels remain as in your original code
# -------------------------------
class MainApp(tk.Tk):
    def __init__(self, controller):
        super().__init__()
        self.controller = controller
        self.title("Server Selector")
        self.servers = [
            ("DR - Chandler", "qdlp2bcmapp0002.ess.fiserv.one"),
            ("DR - Omaha", "Sylp2bcmapp0002.ess.fiserv.one")
        ]
        self.username = None
        self.password = None
        self.saved_configs = None
        self.geometry("1100x600")
        self.show_login()

    def show_login(self):
        for widget in self.winfo_children():
            widget.destroy()
        self.title("Login")
        default_hostname = self.servers[0][1]
        self.login_panel = LoginPanel(self, default_hostname, on_login=self.on_login)
        self.login_panel.pack(fill=tk.BOTH, expand=True)

    def on_login(self, hostname, username, password):
        self.username = username
        self.password = password
        self.controller.connect(hostname, username, password)
        self.saved_configs = self.controller.get_saved_configurations()
        self.show_action_panel()

    def show_action_panel(self):
        for widget in self.winfo_children():
            widget.destroy()
        self.title("Manage Saved Configurations")
        self.action_panel = ActionPanel(self, self.controller, self.username, self.password,
                                        self.saved_configs, self.servers)
        self.action_panel.pack(fill=tk.BOTH, expand=True)

def main():
    mvcm_instance = mvcm.Mvcm()
    controller = BusinessController(mvcm_instance)
    app = MainApp(controller)
    app.mainloop()

if __name__ == "__main__":
    main()
