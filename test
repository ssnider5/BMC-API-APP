class ActionPanel(tk.Frame):
    def __init__(self, master, controller, username, password, saved_configs, servers, **kwargs):
        super().__init__(master, **kwargs)
        self.controller = controller
        self.username = username
        self.password = password
        self.saved_configs = saved_configs
        self.servers = servers  # List of tuples: (Environment, Hostname)
        self.selected_config_name = None
        self.selected_file = None
        self.create_data = None
        self.source_hostname = None
        self.target_hostname = None
        self.current_banner_selection = None
        self.current_action = None
        self.banner_buttons = {}
        self.create_widgets()
    
    def create_widgets(self):
        # ---------------------------
        # Banner: Now with two new buttons only
        # ---------------------------
        banner_frame = ttk.Frame(self)
        banner_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Program name label on the left
        program_label = tk.Label(banner_frame, text="bmc api", font=('TkDefaultFont', 14, 'bold'))
        program_label.pack(side=tk.LEFT, padx=(5, 10))
        
        # New banner buttons: "Saved Configurations" and "CCS Servers"
        for option in ["Saved Configurations", "CCS Servers"]:
            btn = tk.Button(banner_frame,
                            text=option,
                            command=lambda opt=option: self.select_banner_option(opt),
                            relief="flat", bd=0, padx=10, pady=5)
            btn.pack(side=tk.LEFT, padx=5)
            self.banner_buttons[option] = btn
        
        # ---------------------------
        # Main container: split into side panel (left) and content panel (right)
        # ---------------------------
        self.main_container = ttk.Frame(self)
        self.main_container.pack(fill=tk.BOTH, expand=True)
        
        # Create a side container that holds a toggle button and the side panel
        self.side_container = ttk.Frame(self.main_container)
        self.side_container.grid(row=0, column=0, sticky="ns")
        
        # Toggle button to collapse/expand the side panel
        self.toggle_button = tk.Button(self.side_container, text="<<", command=self.toggle_side_panel)
        self.toggle_button.pack(side=tk.TOP, anchor="e")
        
        # The side panel holds the action buttons that will change based on banner selection
        self.side_panel = ttk.Frame(self.side_container, width=200, relief=tk.GROOVE, borderwidth=1)
        self.side_panel.pack(fill=tk.Y, expand=False)
        
        # Content panel for showing detailed action panels
        self.content_panel = ttk.Frame(self.main_container)
        self.content_panel.grid(row=0, column=1, sticky="nsew")
        
        # Make sure the content panel expands
        self.main_container.columnconfigure(1, weight=1)
        self.main_container.rowconfigure(0, weight=1)
    
    def toggle_side_panel(self):
        # Collapses or expands the side panel (the toggle button remains visible)
        if self.side_panel.winfo_ismapped():
            self.side_panel.pack_forget()
            self.toggle_button.config(text=">>")
        else:
            self.side_panel.pack(fill=tk.Y, expand=False)
            self.toggle_button.config(text="<<")
    
    def select_banner_option(self, option):
        self.current_banner_selection = option
        # Update banner button colors to indicate selection
        for opt, btn in self.banner_buttons.items():
            if opt == option:
                btn.config(bg="orange", fg="white")
            else:
                btn.config(bg="SystemButtonFace", fg="black")
        # Ensure the side panel is visible (expanded) when a new banner is selected
        if not self.side_panel.winfo_ismapped():
            self.side_panel.pack(fill=tk.Y, expand=False)
            self.toggle_button.config(text="<<")
        # Update the side panel contents based on the selected banner option
        self.update_side_panel(option)
        # Optionally, clear any existing content from the content panel
        for widget in self.content_panel.winfo_children():
            widget.destroy()
    
    def update_side_panel(self, option):
        # Clear the side panel (do not clear the toggle button, which is in the container)
        for widget in self.side_panel.winfo_children():
            widget.destroy()
        if option == "Saved Configurations":
            # Populate with the original actions
            actions = ["Download", "Upload", "Restore", "Create", "Update"]
            for action in actions:
                btn = tk.Button(self.side_panel,
                                text=action,
                                command=lambda act=action: self.select_action(act))
                btn.pack(fill=tk.X, padx=5, pady=2)
        elif option == "CCS Servers":
            # Create a placeholder button (or add your future CCS-related buttons here)
            btn = tk.Button(self.side_panel,
                            text="CCS Option Placeholder",
                            command=lambda: self.select_action("CCS Option Placeholder"))
            btn.pack(fill=tk.X, padx=5, pady=2)
    
    def select_action(self, action):
        self.current_action = action
        # Update side panel button colors to show which action is active
        for widget in self.side_panel.winfo_children():
            if isinstance(widget, tk.Button):
                if widget.cget("text") == action:
                    widget.config(bg="orange", fg="white")
                else:
                    widget.config(bg="SystemButtonFace", fg="black")
        # Clear the content panel and load the corresponding panel
        for widget in self.content_panel.winfo_children():
            widget.destroy()
        if action in ['Download', 'Restore']:
            panel = DownloadRestorePanel(self.content_panel, action, self.saved_configs,
                                         self.username, self.controller.mvcm, self.on_config_select)
            panel.pack(fill=tk.BOTH, expand=True)
            panel.refresh_configs()
        elif action == 'Upload':
            panel = UploadPanel(self.content_panel, self.on_file_select)
            panel.pack(fill=tk.BOTH, expand=True)
        elif action == 'Create':
            panel = CreatePanel(self.content_panel, self.on_create)
            panel.pack(fill=tk.BOTH, expand=True)
        elif action == 'Update':
            panel = UpdatePanel(self.content_panel, self.servers, self.on_update_select)
            panel.pack(fill=tk.BOTH, expand=True)
        elif action == "CCS Option Placeholder":
            placeholder = ttk.Label(self.content_panel, text="Implement CCS Servers functionality here")
            placeholder.pack(pady=20)
    
    # Callback methods remain unchanged
    def on_config_select(self, config_name):
        self.selected_config_name = config_name
    
    def on_file_select(self, file_path):
        if file_path and os.path.exists(file_path):
            self.selected_file = file_path
    
    def on_create(self, name, description):
        if name:
            self.create_data = (name, description)
    
    def on_update_select(self, source_hostname, target_hostname):
        self.source_hostname = source_hostname
        self.target_hostname = target_hostname
