class TestCode(tk.Frame):
    def __init__(self, master, controller, **kwargs):
        super().__init__(master, **kwargs)
        self.controller = controller
        self.base_url = 'https://qdlp2bcmapp0002.ess.fiserv.one/mvcm-api/logs'
        
        # Two-level caching strategy
        self.raw_log_cache = {}  # Cache for raw downloaded logs
        self.filtered_log_cache = {}  # Cache for filtered results
        
        # Create an input frame for date and time filters.
        self.input_frame = ttk.Frame(self)
        self.input_frame.pack(pady=10)
        
        # Date entry label and field.
        ttk.Label(self.input_frame, text="Date (YYYY-MM-DD):").grid(row=0, column=0, padx=5, pady=2)
        self.date_entry = ttk.Entry(self.input_frame)
        self.date_entry.grid(row=0, column=1, padx=5, pady=2)
        
        # Time entry label and field.
        ttk.Label(self.input_frame, text="Time (HH: or HH:MM):").grid(row=1, column=0, padx=5, pady=2)
        self.time_entry = ttk.Entry(self.input_frame)
        self.time_entry.grid(row=1, column=1, padx=5, pady=2)
        
        # Button to start log retrieval.
        self.retrieve_button = ttk.Button(self.input_frame, text="Retrieve Logs", command=self.start_log_retrieval)
        self.retrieve_button.grid(row=2, column=0, columnspan=2, pady=5)

        # Create a panel for displaying logs.
        self.log_panel = ttk.Frame(self)
        self.log_panel.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Create the Text widget for log output.
        self.text_widget = tk.Text(self.log_panel, wrap='none', font=("Verdana", 10))
        self.text_widget.pack(side='left', fill='both', expand=True)
        
        # Create a vertical scrollbar and attach it.
        self.v_scrollbar = ttk.Scrollbar(self.log_panel, orient='vertical', command=self.text_widget.yview)
        self.v_scrollbar.pack(side='right', fill='y')
        self.text_widget.configure(yscrollcommand=self.v_scrollbar.set)
        
        # Add cache status display
        ttk.Label(self.input_frame, text="Cache Status:").grid(row=3, column=0, padx=5, pady=2)
        self.cache_status = ttk.Label(self.input_frame, text="0 logs cached")
        self.cache_status.grid(row=3, column=1, padx=5, pady=2)
        
        # Add clear cache button
        self.clear_cache_button = ttk.Button(self.input_frame, text="Clear Cache", command=self.clear_cache)
        self.clear_cache_button.grid(row=4, column=0, columnspan=2, pady=5)
