class CreateFromExcelPanel(tk.Frame):
    def __init__(self, master, excel_parser, mvcm_inst, **kwargs):
        super().__init__(master, **kwargs)
        self.excel_parser = excel_parser
        self.selected_file = None
        self.create_widgets()
        self.mvcm_inst = mvcm_inst
        self.created_servers = []  # To store names of created servers

    def create_widgets(self):
        # Main container
        container = ttk.Frame(self)
        container.pack(fill=tk.BOTH, expand=True)
        
        # File selection frame
        file_frame = ttk.Frame(container)
        file_frame.pack(fill=tk.X, pady=(10, 20))
        
        # File path display
        self.file_path_var = tk.StringVar()
        self.file_path_var.set("No file selected")
        file_path_label = ttk.Label(file_frame, text="Excel File:")
        file_path_label.pack(side=tk.LEFT, padx=5)
        file_path_entry = ttk.Entry(file_frame, textvariable=self.file_path_var, width=50, state='readonly')
        file_path_entry.pack(side=tk.LEFT, padx=5, expand=True, fill=tk.X)
        
        # Browse button
        browse_button = ttk.Button(file_frame, text="Browse...", command=self.browse_file)
        browse_button.pack(side=tk.LEFT, padx=5)
        
        # Table frame
        self.table_frame = ttk.Frame(container)
        self.table_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Initially empty message
        self.empty_label = ttk.Label(self.table_frame, text="Select an Excel file to display data")
        self.empty_label.pack(expand=True)
        
        # Actions frame
        actions_frame = ttk.Frame(container)
        actions_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Import button (initially disabled)
        self.import_button = ttk.Button(actions_frame, text="Create CCS servers", command=self.import_data, state='disabled')
        self.import_button.pack(side=tk.BOTTOM, pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="Select Excel File",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        
        if file_path:
            self.selected_file = file_path
            self.file_path_var.set(file_path)
            self.load_excel_preview()
    
    def load_excel_preview(self):
        # Clear existing table if any
        for widget in self.table_frame.winfo_children():
            widget.destroy()
        
        try:
            # Use the excel parser to read the file
            headers, data = self.excel_parser.read_excel(self.selected_file)
            
            # Create new treeview for the data
            self.data_tree = ttk.Treeview(self.table_frame, columns=headers, show='headings')
            
            # Set column headings
            for header in headers:
                self.data_tree.heading(header, text=header)
                # Adjust column width based on content
                self.data_tree.column(header, width=100)
            
            # Insert data rows
            for row in data:
                self.data_tree.insert("", tk.END, values=row)
            
            # Add scrollbars
            y_scrollbar = ttk.Scrollbar(self.table_frame, orient=tk.VERTICAL, command=self.data_tree.yview)
            self.data_tree.configure(yscrollcommand=y_scrollbar.set)
            
            x_scrollbar = ttk.Scrollbar(self.table_frame, orient=tk.HORIZONTAL, command=self.data_tree.xview)
            self.data_tree.configure(xscrollcommand=x_scrollbar.set)
            
            # Pack everything
            self.data_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            y_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            x_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
            
            # Enable import button
            self.import_button.config(state='normal')
            
        except Exception as e:
            error_label = ttk.Label(self.table_frame, text=f"Error loading Excel file: {str(e)}", foreground="red")
            error_label.pack(expand=True)   
            self.import_button.config(state='disabled')
    
    def import_data(self):
        # This method would be implemented to handle the actual import process
        # For example, sending the data to an API or processing it further
        try:
            # Example implementation:
            json_data = self.excel_parser.get_json_data()
            self.created_servers = self.excel_parser.extract_names(json_data)
            result = self.excel_parser.create_ccs_server(self.mvcm_inst, json_data)
            
            messagebox.showinfo("Import Successful", "Data has been successfully imported!")
            
            # Show verification prompt after successful import
            self.show_verification_prompt()
            
        except Exception as e:
            messagebox.showerror("Import Failed", f"Failed to import data: {str(e)}")
    
    def show_verification_prompt(self):
        """Shows a popup asking if the user wants to verify the servers"""
        verify = messagebox.askyesno("Verify Servers", "Would you like to verify the server(s)?")
        if verify:
            self.verify_import()
    
    def verify_import(self):
        """Verifies the imported servers by sending POST requests to start them"""
        if not self.created_servers:
            messagebox.showinfo("Verification", "No servers to verify.")
            return
        
        results = []
        for server_name in self.created_servers:
            if not server_name:
                continue
                
            try:
                # Send POST request to start the server
                endpoint = f"/api/ccs/servers/{server_name}/operations/start"
                response = self.mvcm_inst.post(endpoint)
                
                # Add result to the list
                status = "Success" if response.get('status', 0) == 200 else "Failed"
                results.append(f"{server_name}: {status}")
            except Exception as e:
                results.append(f"{server_name}: Error - {str(e)}")
        
        # Show verification results
        if results:
            result_message = "Verification Results:\n" + "\n".join(results)
            messagebox.showinfo("Verification Results", result_message)
        else:
            messagebox.showinfo("Verification", "No servers were verified.")
