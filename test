# -------------------------------
# Download/Restore Panel
# -------------------------------
class DownloadRestorePanel(tk.Frame):
    def __init__(self, master, action, saved_configs, username, mvcm_instance, on_select, **kwargs):
        super().__init__(master, **kwargs)
        self.action = action
        self.saved_configs = saved_configs
        self.username = username
        self.mvcm = mvcm_instance
        self.on_select = on_select
        self.create_widgets()

    def create_widgets(self):
        container = ttk.Frame(self)
        container.pack(fill=tk.BOTH, expand=True)
        refresh_frame = ttk.Frame(container)
        refresh_frame.pack(fill=tk.X, pady=(0, 10))
        refresh_button = ttk.Button(refresh_frame, text="â†» Refresh", command=self.refresh_configs)
        refresh_button.pack(side=tk.RIGHT, padx=5)
        table_frame = ttk.Frame(container)
        table_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        self.config_tree = ttk.Treeview(table_frame, 
                                        columns=("Number", "Name", "Description", "Date", "User"), 
                                        show='headings')
        self.config_tree.heading("Number", text="#")
        self.config_tree.heading("Name", text="Name")
        self.config_tree.heading("Description", text="Description")
        self.config_tree.heading("Date", text="Date")
        self.config_tree.heading("User", text="User")
        self.config_tree.column("Number", width=50)
        self.config_tree.column("Name", width=200)
        self.config_tree.column("Description", width=400)
        self.config_tree.column("Date", width=100)
        self.config_tree.column("User", width=100)
        self.config_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.config_tree.yview)
        self.config_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.populate_configs()
        self.bind_all('<KeyPress>', self.handle_number_key)
        self.config_tree.bind('<<TreeviewSelect>>', self.on_tree_select)

    def refresh_configs(self):
        try:
            r = self.mvcm.get("/saved-configurations", "application/json")
            if r.ok:
                self.saved_configs = r.json()
                for item in self.config_tree.get_children():
                    self.config_tree.delete(item)
                for idx, config in enumerate(self.saved_configs, 1):
                    self.config_tree.insert("", tk.END, values=(
                        str(idx),
                        config['name'],
                        config['description'],
                        config['date'],
                        config['user']
                    ))
                print("Configurations refreshed successfully!")
            else:
                print(f"Failed to refresh configurations. Status code: {r.status_code}")
        except Exception as e:
            print(f"Error refreshing configurations: {str(e)}")

    def populate_configs(self):
        if self.saved_configs:
            for idx, config in enumerate(self.saved_configs, 1):
                self.config_tree.insert("", tk.END, values=(
                    str(idx),
                    config['name'],
                    config['description'],
                    config['date'],
                    config['user']
                ))

    def handle_number_key(self, event):
        if event.char.isdigit():
            index = int(event.char)
            if 1 <= index <= len(self.saved_configs):
                children = self.config_tree.get_children()
                self.config_tree.selection_remove(self.config_tree.selection())
                self.config_tree.selection_set(children[index-1])
                self.config_tree.focus(children[index-1])
                item = self.config_tree.item(children[index-1])
                self.on_select(item['values'][1])

    def on_tree_select(self, event):
        selected = self.config_tree.selection()
        if selected:
            item = self.config_tree.item(selected[0])
            self.on_select(item['values'][1])
